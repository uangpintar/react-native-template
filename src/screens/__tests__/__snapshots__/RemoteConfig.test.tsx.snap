// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RemoteConfig screen should remote config screen can render 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    Array [
      Object {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    dataSet={Object {}}
    style={
      Array [
        Object {},
        Object {
          "flex": 1,
        },
      ]
    }
  >
    <Text
      dataSet={Object {}}
      style={
        Object {
          "backgroundColor": undefined,
          "color": "#171717",
          "fontFamily": undefined,
          "fontSize": 20,
          "fontStyle": "normal",
          "fontWeight": "700",
          "letterSpacing": 0,
          "lineHeight": 25,
          "paddingBottom": 12,
          "paddingLeft": 16,
          "paddingRight": 16,
          "paddingTop": 16,
          "textDecorationLine": undefined,
        }
      }
    >
      Remote Config
    </Text>
    <RCTScrollView
      contentContainerStyle={
        Array [
          Object {},
          Object {
            "dataSet": Object {},
          },
        ]
      }
      data={Array []}
      dataSet={Object {}}
      getItem={[Function]}
      getItemCount={[Function]}
      keyExtractor={[Function]}
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      refreshControl={
        <RefreshControlMock
          onRefresh={[Function]}
          refreshing={false}
        />
      }
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={Object {}}
      viewabilityConfigCallbackPairs={Array []}
    >
      <RCTRefreshControl />
      <View />
    </RCTScrollView>
    <View
      accessibilityRole="button"
      accessible={true}
      collapsable={false}
      colorScheme="primary"
      dataSet={Object {}}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "alignItems": "center",
            "backgroundColor": "#0891b2",
            "borderRadius": 4,
            "flexDirection": "row",
            "justifyContent": "center",
            "paddingBottom": 10,
            "paddingLeft": 12,
            "paddingRight": 12,
            "paddingTop": 10,
          },
          Object {
            "margin": 20,
          },
        ]
      }
    >
      <View
        dataSet={Object {}}
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
          }
        }
        test={true}
      >
        <View
          dataSet={Object {}}
          style={Object {}}
        >
          <Text
            dataSet={Object {}}
            style={
              Object {
                "backgroundColor": undefined,
                "color": "#fafafa",
                "fontFamily": undefined,
                "fontSize": 14,
                "fontStyle": "normal",
                "fontWeight": "400",
                "letterSpacing": 0,
                "lineHeight": 21,
                "textDecorationLine": undefined,
              }
            }
          >
            Fetch
          </Text>
        </View>
      </View>
    </View>
  </View>
</RNCSafeAreaProvider>
`;
